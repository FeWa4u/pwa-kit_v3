/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import {UseQueryOptions, UseQueryResult} from '@tanstack/react-query'
import {ApiClients, Argument, DataType, MergedOptions} from '../types'
import useCommerceApi from '../useCommerceApi'
import {useQuery} from '../useQuery'

{{!~-- Add aliases to @root for brevity/clarity --~}}
{{~ assign 'clientInstance' name.lowerCamelCase ~}}
{{~ assign 'clientClass' name.upperCamelCase ~}}

type Client = ApiClients['{{@root.clientInstance}}']

{{#each model.encodes.endPoints}}{{#each operations}}{{#if (isQuery @root.clientClass this)~}}
/**
 * A hook for `{{@root.clientClass}}#{{name}}`.
 * {{{formatForTsDoc description}}}
 * @see {@link https://developer.salesforce.com/docs/commerce/commerce-api/references/{{@root.name.kebabCase}}?meta={{name~}} } for more information about the API endpoint.
 * @see {@link https://salesforcecommercecloud.github.io/commerce-sdk-isomorphic/classes/{{lowercase @root.clientInstance}}.{{lowercase @root.clientInstance}}-1.html#{{lowercase (getValue name)~}} } for more information on the parameters and returned data type.
 * @returns An object describing the state of the request.
 */
export const use{{#startsWith 'get' (getValue name)~}}
{{removeFirst (getValue name) 'get'}}
{{~else~}}
{{~#startsWith 'retrieve' (getValue name)~}}
{{removeFirst (getValue name) 'retrieve'}}
{{~else~}}
{{capitalize (getValue name)}}
{{~/startsWith}}{{/startsWith}} = (
    apiOptions: Argument<Client['{{name}}']>,
    queryOptions: Omit<UseQueryOptions<DataType<Client['{{name}}']>>, 'queryFn'> = {}
): UseQueryResult<DataType<Client['{{name}}']>> => {
    const { {{~@root.clientInstance}}: client} = useCommerceApi()
    const method = (arg: Argument<Client['{{name}}']>) => client.{{name}}(arg)
    const requiredParameters = [
        {{#each ../parameters}}'{{name}}',{{/each}}
        {{#each request.queryParameters}}{{#if (is required "true")}}'{{name}}',{{/if}}{{/each}}
    ] as const
    // Parameters can be set in `apiOptions` or `client.clientConfig`; they are merged in the helper
    // hook, so we use a callback here that receives that merged object.
    const getQueryKey = ({parameters}: MergedOptions<Client, Argument<Client['{{name}}']>>) => [
        {{{createQueryKeyFragment (getValue ../path) 'parameters'}}},
        // Full parameters last for easy lookup
        parameters
    ] as const
    
    return useQuery(
        apiOptions,
        queryOptions,
        {
            client,
            method,
            requiredParameters,
            getQueryKey,
        }
    )
}
{{/if}}{{/each}}{{/each}}
